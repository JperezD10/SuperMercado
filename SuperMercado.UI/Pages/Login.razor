@attribute [Route(Rutas.Login)]
@layout LoginLayout
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<section class="vh-100 gradient-custom">
    <div class="container py-5 h-100">
        <div class="row justify-content-center align-items-center h-100">
            <div class="col-12 col-lg-9 col-xl-7">
                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">
                    <div class="card-body p-4 p-md-5">
                        <h3 class="mb-4 pb-2 pb-md-0 mb-md-5">Ingresar</h3>
                        <EditForm Model="loginModel" OnValidSubmit="LogIn">
                            <DataAnnotationsValidator/>
                            <div class="row">
                                <div class="col-md-12 mb-4">

                                    <div class="form-outline">
                                        <label class="form-label" for="Usuario">Usuario</label>
                                        <InputText id="Usuario" class="form-control form-control-lg" autocomplete="off" @bind-Value="loginModel.Username"/>
                                        <ValidationMessage For="()=> loginModel.Username" />
                                    </div>

                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12 mb-4">
                                    <div class="form-outline">
                                        <label class="form-label" for="Contraseña">Contraseña</label>
                                        <InputText type="password" id="Contraseña" class="form-control form-control-lg" autocomplete="off" @bind-Value="loginModel.Password" />
                                        <ValidationMessage For="()=> loginModel.Password" />
                                    </div>
                                </div>
                            </div>

                            <div class="mt-4 pt-2 row">
                                <button type="submit" class="btn btn-primary btn-lg btn-block">
                                    Entrar
                                </button>
                            </div>

                            @if (!estaLogeado)
                            {
                                <div class="row mt-4 alert alert-danger">
                                    @mensaje
                                </div>
                            }

                            <div class="row">
                                <div class="mt-4 pt-2 row">
                                    <a style="cursor: pointer; text-decoration: underline; color: blue" @onclick="() => NavigationManager.NavigateTo(Rutas.Register)">Si no tiene una cuenta toque aqui</a>
                                </div>
                            </div>

                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    private LoginModel loginModel;
    private UsuarioBLL _usuarioBLL;
    public Login()
    {
        loginModel = new();
        _usuarioBLL = new();
    }
    private string mensaje;
    private bool estaLogeado = true;
    public async Task LogIn()
    {
        (bool logeado, string mensajeRespuesta, Usuario? usuario ) = _usuarioBLL.Login(loginModel.Username, loginModel.Password);
        //logica de login y credenciales etc etc
        estaLogeado = logeado;

        if (estaLogeado)
        {
            await LocalStorage.SetItemAsStringAsync("username", usuario.Username);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(Rutas.Index);
        }
        else
        {
            mensaje = mensajeRespuesta;
        }
    }
}
